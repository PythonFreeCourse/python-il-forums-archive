<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>על סגנון, 79 תווים בשורה, טכניקות לפיצול שורה וכיו&quot;ב</title>
    <link>https://forums.pythonic.guru/t/topic/9042</link>
    <description>שלום וברוכים הבאים לפינת ה&quot;דברים מוזרים שחלק מהמתכנתים המוזרים האלו מתייחסים אליהם באורח כמעט דתי&quot;.
**אם אין לכם כוח לקרוא הכל, קראו את ההקדמה בקטנה וקפצו רק לסעיף 3.**

והיום, רציתי לדבר על משהו שאני רואה בהרבה קומיטים ולא מעיר עליו כי הוא בעיקר עניין של סגנון.
ה־flake8 מציק לרובכם בגלל הגבלת התווים בשורה, וזה גורם לכם כאב ראש ועצבים.
יותר גרוע, זה גורם לכם לסגנן את הקוד בצורה שקצת מקשה על הקריאה שלו.

בפוסט הזה אני אדבר על:
1. למה יש הגבלה כזו בכלל? מה היתרונות שלה?
2. האם היא קיימת בתעשייה?
3. איך עושים את זה נכון?
4. האם אין משהו שפותר את זה אוטומטית?
5. האם אני אתחיל לאכוף את זה בקומיטים שנשלחים?

נפתח בכמה מילים על..

## למה ההגבלה הזו קיימת?

### היסטוריה

כמו כל דבר, הסיפור שלנו לגבי ההגבלה הזו מתחיל בקצת היסטוריה.
בעבר, דרך מסוימת לשמור נתונים ממוחשבים בצורה פיזית הייתה בעזרת [כרטיסים מנוקבים](https://en.wikipedia.org/wiki/Punched_card).
בין הכרטיסים הפופולריים ביותר היו אלו של IBM, שהכילו 12 שורות שבכל אחת מהן 80 &quot;תאים&quot;, כל תא מייצג ביט.
אם &quot;תא&quot; בטבלה הזו (למעשה מקום פיזי על הכרטיס) נוקב, ערכו היה 1, אחרת ערכו היה 0.
על אותם כרטיסים היו שומרים פעמים רבות גם תוכניות מחשב שרצו להריץ.

לכרטיסים המנוקבים השפעות תרבותיות רבות.
רוחב ברירת המחדל של הטרמינל שלכם (cmd) הוא 80 תווים, ו־PEP8, לדוגמה, ממליץ על עד 79 תווים בשורה אלא אם יש הסכמה רחבה בקרב כותבי הפרויקט על להעלות את המגבלה לעד 100 תווים.

אוקיי. אז סיבה היסטורית יש. אבל...
אנחנו לא דינוזאורים ולא מקבלים החלטות כ&quot;כ חשובות שמשפיעות על הקוד שלנו נטו בגלל התרפקות על העבר.
איפה ההיגיון?

### פרקטיקה

הנה כמה סיבות שנהוג לציין בעד ההגבלה של X תווים בשורה:

1. קוד של 79 תווים בשורה נכנס בכל מסך ובכל חלון – בטרמינלים, בטבלטים ואפילו במסך של טלפון בתצוגה אופקית.
2. בסביבת עבודה, קוד של 79 תווים מאפשר לראות diff (שתי עמודות של קוד) בקלות, בלי שהקוד &quot;גולש&quot; ו&quot;נשבר&quot; לשורות הבאות. במסכים גדולים זה האורך היחיד שיאפשר עבודה נוחה במצבי ‏[3 way merge](https://stackoverflow.com/questions/572237/whats-the-best-three-way-merge-tool).
3. העמסת פעולות רבות בשורה מעמיסה קוגנטיבית על הקורא. פיצול לשורות קצרות מכריחה את המתכנת לא להכניס יותר מדי לוגיקה לשורה אחת.
4. זה נכון גם לגבי הזחות – קוד מוזח מדי &quot;מבזבז&quot; תווים בשורה, כך שהגבלת תווים מעודדת מתכנתים לא להזיח את הקוד יותר מדי, ומכריחה אותם לפצל לוגיקה מורכבת לפונקציות נפרדות.
5. נרצה לאפשר לקוראי הקוד לסרוק אותו במהירות. שורות ארוכות מדי יגרמו לעיניים לזוז הרבה ימינה ושמאלה.

הסיבות פה מנוסחות עבור 79 תווים בשורה – אבל תופסות פחות או יותר גם עבור הגבלות דומות (100, נניח).

## האם השטות הזו קיימת בתעשייה?

כמובן, כמו כל דבר בתעשיית המפתחים, סביב הדבר הזה קיים [ויכוח כמעט דתי](https://stackoverflow.com/questions/110928/is-there-a-valid-reason-for-enforcing-a-maximum-width-of-80-characters-in-a-code), שלפעמים יוצר לשרשורים [ארוכים ומתישים](https://news.ycombinator.com/item?id=5436993).
המתנגדים (ביניהם [לינוס טורבלס](https://www.theregister.com/2020/06/01/linux_5_7/#:~:text=Linux%20kernel%20overlord%20Linus%20Torvalds,the%20topic%20of%20line%20lengths.), המפתח החלוץ של מערכת ההפעלה לינוקס), טוענים שאין סיבה להגבלה של 80 תווים ושהיא מגבילה וגורמת לבעיות בחיים האמיתיים, כמו חיפוש בקוד.
רוב המתכנתים (כולל לינוס, נניח) כן מסכימים על כך שצריכה להיות הגבלה עקרונית מסוימת, והקונצנזוס נמצא אי שם בין 80 ל־100 תווים. חלק מהמפתחים מחזיקים בדעה שמדובר בכלל אצבע שמותר להפר כל עוד זה משרת מטרה מסוימת.

כשתגיעו למקום העבודה שלכם, לרוב יהיו כללים קיימים בנוגע לאורכי השורות המקסימליים, ואתם תתבקשו לעקוב אחר ההסכמה.
באופן כללי, המלצתי אליכם היא להתרחק מוויכוחים דתיים שכאלו.
אף אחד לא יוצא צודק או מרווח והדעות של כולם לגיטימיות אבל לא עד כדי כך חשובות :slight_smile: 

## איך עושים את זה נכון?

כמובן שמדובר פה בעניין של סגנון, אבל אני הולך להציע את משנתי.

### דרך 1: השמה למשתנים.

נדמיין את השורה הבאה:
```python
wav_lowered_filenames = [file.lower() for file in pathlib.Path(SOUND_DIRECTORY).glob(&#39;**/*.wav&#39;)]
```

בקלות אפשר לפצל למשהו כזה:
```python
wav_files = pathlib.Path(SOUND_DIRECTORY).glob(&#39;**/*.wav&#39;)
wav_lowered_filenames = [file.lower() for file in wav_files]
```

הרבה יותר קריא, ונכנס אחלה ב־80 תווים בשורה.
זכרו שמותר לעשות את אותו דבר גם עם תנאים:

```python
return select(Users.id, User.name).from(Users).where(Users.role == UserRoles.Administrator)
```

יכול להיכתב כ:

```python
is_admin = Users.role == UserRoles.Administrator
return select(Users.id, User.name).from(Users).where(is_admin)
```

### דרך 2: Unpacking.

הרבה פעמים Unpacking יכול גם לקצר לנו את הקוד, וגם להפוך אותו לקריא יותר.
חשוב לא להשתמש ב־Unpacking כאשר הוא מסבך את הקוד, אבל לפעמים זה נראה מדהים:

במקום:

```
is_admin = Users.role == UserRoles.Administrator
return select(User.id, User.name, User.address, User.email).from(Users).where(is_admin)
```
נעדיף לכתוב:

```
user_shipping_details = (User.id, User.name, User.address, User.email)
is_admin = Users.role == UserRoles.Administrator
return select(*user_shipping_details).from(Users).where(is_admin)
```

גם אנחנו מבינים טוב יותר למה דווקא השדות האלו נבחרו (אלו השדות שחשובים לצורך משלוח של משהו למשתמש), וגם קיצרנו את השורה והפכנו אותה לקריאה יותר.

אפשר להשתמש ב־Unpacking גם כדי לחסוך קריאה לא נעימה לפונקציה מרובת פרמטרים, אם יש לנו את הנתונים במילון. 
תוכלו לראות דוגמה פשוטה לזה ב־[lms](https://github.com/PythonFreeCourse/lms/blob/master/lms/lmsweb/views.py#L103) או דוגמה מורכבת יותר [בפתרון שלי ל־Advent of Code יום 2](https://github.com/yammesicka/advent/blob/master/2020/2/pretty.py).

### דרך 3: פיצול שורה בכוח.

לפעמים אנחנו לא מעוניינים או לא יכולים לבצע השמות – בין אם מחשש לפגיעה בקריאות הקוד, או במקרים אחרים בהם הפיצול להשמה לא מספיק.
דרך טובה להתגבר על הבעיה הזו היא לשבור שורה אחת להרבה שורות.

אחת הצורות המוכרות והפחות מומלצות היא לעשות את זה באמצעות התו `\`. PEP8 [פחות מתחבר](https://www.python.org/dev/peps/pep-0008/#:~:text=The%20preferred%20way%20of%20wrapping%20long%20lines) לשיטה הזו.

הצורה הפופולרית והמומלצת היא לפצל את השורה באמצעות סוגריים.
לדוגמה:

```python
return get_all_directory_names(MAIN_DIRECTORY).get_files().to_lowercase().read()
```

יהפוך ל־
```python
return (
    get_all_directory_names(MAIN_DIRECTORY)
   .get_files()
   .to_lowercase()
   .read()
)
```

במקרה הזה, גם השמה למשתנים הייתה עובדת. אבל בואו ניקח דוגמה לפונקציה פחות נעימה:
```python
def get_files_in_directory(dir_name: str, is_recursive: bool) -&gt; Iterable[str]:
```

במקרה הזה, אפשר לפצל בצורה הבאה:

```python
def get_files_in_directory(
    dir_name: str, is_recursive: bool,
) -&gt; Iterable[str]:
```

אפשר להשתמש באותו טריק גם [עם import־ים](https://github.com/PythonFreeCourse/lms/blob/master/lms/lmsweb/views.py#L15) שצריכים פיצול, או [במבני נתונים](https://github.com/PythonFreeCourse/lms/blob/master/lms/models/solutions.py#L116) (מילון, רשימה, tuple) עם הרבה נתונים שצריכים פיצול.


### טיפ: איך מפצלים עם סוגריים ככה שהקוד לא יראה צ&#39;יקמוק

דבר ראשון – אם זו רשימה של דברים, תמיד ודאו ש[גם השורה האחרונה מסתיימת בפסיק](https://forums.pythonic.guru/t/topic/5612/4).
פירטתי למה בקישור, אבל בגדול זה עוזר לאנשים שבאים לאחריכם להשתלב בקוד בלי להוסיף באגים ומשאיר את השורה על שמכם ב־git כשמישהו יוסיף קוד.

אני מקפיד שלא להשאיר את השורה הסוגרת &quot;תלויה באוויר&quot;, בעיניי זה נראה מכוער. כמובן שזה עניין של טעם.
כלומר, לעולם לא כך:
```python
def get_files_in_directory(
    dir_name: str, is_recursive: bool) -&gt; Iterable[str]:
```

וכן כך:


```python
def get_files_in_directory(
    dir_name: str, is_recursive: bool,
) -&gt; Iterable[str]:
```

או כך:


```python
def get_files_in_directory(
    dir_name: str,
    is_recursive: bool,
) -&gt; Iterable[str]:
```

כמובן שעדיף להימנע מרשימות ממש ארוכות שמפוצלות ככה ויוצרות מפלצת של 10 שורות.
אם יש 5 שורות שכתובות ככה אתם אמורים לחשוד שמשהו היה אמור להיות מפוצל בדרך אלגנטית יותר.

## האם אין משהו שפותר את זה אוטומטית?

תלוי עד כמה אתם נוראיים, בלתי נסבלים ופדנטיים בהקשרי אורך השורות שלכם.
אם אתם נוראיים כמוני אז למרבה הצער כיום אין פתרון שעושה את זה בצורה שנראית טוב.

לשימושם של אנשים שכן בריאים בנפשם, יש מודול בשם [black](https://github.com/psf/black) שעושה את זה בצורה סבירה למדי.

חשוב לי להדגיש שוב: **אל** תעירו לאנשים אחרים על דברים סגנוניים אם זה לא ב־guideline של הפרויקט.
שתי סיבות:
1. הזמן שלכם יקר, ומה שלא דאגו לו שייעשה בצורה מספיק אוטומטית – כנראה לא מספיק חשוב.
2. זו דרך מצוינת לזה שכולם יישנאו אתכם ולפתוח מלחמות דת. זה מביא חורבן, סבל, כאוס ומאגיה שחורה.

## האם אני אתחיל לאכוף את זה בקומיטים שנשלחים?

לא.</description>
    <language>he</language>
    <lastBuildDate>Mon, 09 Jan 2023 01:03:21 +0000</lastBuildDate>
    <category>שבוע 16</category>
    <atom:link href="https://forums.pythonic.guru/t/topic/9042.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>על סגנון, 79 תווים בשורה, טכניקות לפיצול שורה וכיו&quot;ב</title>
        <dc:creator><![CDATA[Yam]]></dc:creator>
        <description><![CDATA[
            <p>שלום וברוכים הבאים לפינת ה"דברים מוזרים שחלק מהמתכנתים המוזרים האלו מתייחסים אליהם באורח כמעט דתי".<br>
<strong>אם אין לכם כוח לקרוא הכל, קראו את ההקדמה בקטנה וקפצו רק לסעיף 3.</strong></p>
<p>והיום, רציתי לדבר על משהו שאני רואה בהרבה קומיטים ולא מעיר עליו כי הוא בעיקר עניין של סגנון.<br>
ה־flake8 מציק לרובכם בגלל הגבלת התווים בשורה, וזה גורם לכם כאב ראש ועצבים.<br>
יותר גרוע, זה גורם לכם לסגנן את הקוד בצורה שקצת מקשה על הקריאה שלו.</p>
<p>בפוסט הזה אני אדבר על:</p>
<ol>
<li>למה יש הגבלה כזו בכלל? מה היתרונות שלה?</li>
<li>האם היא קיימת בתעשייה?</li>
<li>איך עושים את זה נכון?</li>
<li>האם אין משהו שפותר את זה אוטומטית?</li>
<li>האם אני אתחיל לאכוף את זה בקומיטים שנשלחים?</li>
</ol>
<p>נפתח בכמה מילים על…</p>
<h2>
<a name="h-1" class="anchor" href="https://forums.pythonic.guru#h-1"></a>למה ההגבלה הזו קיימת?</h2>
<h3>
<a name="h-2" class="anchor" href="https://forums.pythonic.guru#h-2"></a>היסטוריה</h3>
<p>כמו כל דבר, הסיפור שלנו לגבי ההגבלה הזו מתחיל בקצת היסטוריה.<br>
בעבר, דרך מסוימת לשמור נתונים ממוחשבים בצורה פיזית הייתה בעזרת <a href="https://en.wikipedia.org/wiki/Punched_card">כרטיסים מנוקבים</a>.<br>
בין הכרטיסים הפופולריים ביותר היו אלו של IBM, שהכילו 12 שורות שבכל אחת מהן 80 “תאים”, כל תא מייצג ביט.<br>
אם “תא” בטבלה הזו (למעשה מקום פיזי על הכרטיס) נוקב, ערכו היה 1, אחרת ערכו היה 0.<br>
על אותם כרטיסים היו שומרים פעמים רבות גם תוכניות מחשב שרצו להריץ.</p>
<p>לכרטיסים המנוקבים השפעות תרבותיות רבות.<br>
רוחב ברירת המחדל של הטרמינל שלכם (cmd) הוא 80 תווים, ו־PEP8, לדוגמה, ממליץ על עד 79 תווים בשורה אלא אם יש הסכמה רחבה בקרב כותבי הפרויקט על להעלות את המגבלה לעד 100 תווים.</p>
<p>אוקיי. אז סיבה היסטורית יש. אבל…<br>
אנחנו לא דינוזאורים ולא מקבלים החלטות כ"כ חשובות שמשפיעות על הקוד שלנו נטו בגלל התרפקות על העבר.<br>
איפה ההיגיון?</p>
<h3>
<a name="h-3" class="anchor" href="https://forums.pythonic.guru#h-3"></a>פרקטיקה</h3>
<p>הנה כמה סיבות שנהוג לציין בעד ההגבלה של X תווים בשורה:</p>
<ol>
<li>קוד של 79 תווים בשורה נכנס בכל מסך ובכל חלון – בטרמינלים, בטבלטים ואפילו במסך של טלפון בתצוגה אופקית.</li>
<li>בסביבת עבודה, קוד של 79 תווים מאפשר לראות diff (שתי עמודות של קוד) בקלות, בלי שהקוד “גולש” ו"נשבר" לשורות הבאות. במסכים גדולים זה האורך היחיד שיאפשר עבודה נוחה במצבי ‏<a href="https://stackoverflow.com/questions/572237/whats-the-best-three-way-merge-tool">3 way merge</a>.</li>
<li>העמסת פעולות רבות בשורה מעמיסה קוגנטיבית על הקורא. פיצול לשורות קצרות מכריחה את המתכנת לא להכניס יותר מדי לוגיקה לשורה אחת.</li>
<li>זה נכון גם לגבי הזחות – קוד מוזח מדי “מבזבז” תווים בשורה, כך שהגבלת תווים מעודדת מתכנתים לא להזיח את הקוד יותר מדי, ומכריחה אותם לפצל לוגיקה מורכבת לפונקציות נפרדות.</li>
<li>נרצה לאפשר לקוראי הקוד לסרוק אותו במהירות. שורות ארוכות מדי יגרמו לעיניים לזוז הרבה ימינה ושמאלה.</li>
</ol>
<p>הסיבות פה מנוסחות עבור 79 תווים בשורה – אבל תופסות פחות או יותר גם עבור הגבלות דומות (100, נניח).</p>
<h2>
<a name="h-4" class="anchor" href="https://forums.pythonic.guru#h-4"></a>האם השטות הזו קיימת בתעשייה?</h2>
<p>כמובן, כמו כל דבר בתעשיית המפתחים, סביב הדבר הזה קיים <a href="https://stackoverflow.com/questions/110928/is-there-a-valid-reason-for-enforcing-a-maximum-width-of-80-characters-in-a-code">ויכוח כמעט דתי</a>, שלפעמים יוצר לשרשורים <a href="https://news.ycombinator.com/item?id=5436993">ארוכים ומתישים</a>.<br>
המתנגדים (ביניהם <a href="https://www.theregister.com/2020/06/01/linux_5_7/#:~:text=Linux%20kernel%20overlord%20Linus%20Torvalds,the%20topic%20of%20line%20lengths.">לינוס טורבלס</a>, המפתח החלוץ של מערכת ההפעלה לינוקס), טוענים שאין סיבה להגבלה של 80 תווים ושהיא מגבילה וגורמת לבעיות בחיים האמיתיים, כמו חיפוש בקוד.<br>
רוב המתכנתים (כולל לינוס, נניח) כן מסכימים על כך שצריכה להיות הגבלה עקרונית מסוימת, והקונצנזוס נמצא אי שם בין 80 ל־100 תווים. חלק מהמפתחים מחזיקים בדעה שמדובר בכלל אצבע שמותר להפר כל עוד זה משרת מטרה מסוימת.</p>
<p>כשתגיעו למקום העבודה שלכם, לרוב יהיו כללים קיימים בנוגע לאורכי השורות המקסימליים, ואתם תתבקשו לעקוב אחר ההסכמה.<br>
באופן כללי, המלצתי אליכם היא להתרחק מוויכוחים דתיים שכאלו.<br>
אף אחד לא יוצא צודק או מרווח והדעות של כולם לגיטימיות אבל לא עד כדי כך חשובות <img src="https://forums.pythonic.guru/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="h-5" class="anchor" href="https://forums.pythonic.guru#h-5"></a>איך עושים את זה נכון?</h2>
<p>כמובן שמדובר פה בעניין של סגנון, אבל אני הולך להציע את משנתי.</p>
<h3>
<a name="h-1-6" class="anchor" href="https://forums.pythonic.guru#h-1-6"></a>דרך 1: השמה למשתנים.</h3>
<p>נדמיין את השורה הבאה:</p>
<pre><code class="lang-python">wav_lowered_filenames = [file.lower() for file in pathlib.Path(SOUND_DIRECTORY).glob('**/*.wav')]
</code></pre>
<p>בקלות אפשר לפצל למשהו כזה:</p>
<pre><code class="lang-python">wav_files = pathlib.Path(SOUND_DIRECTORY).glob('**/*.wav')
wav_lowered_filenames = [file.lower() for file in wav_files]
</code></pre>
<p>הרבה יותר קריא, ונכנס אחלה ב־80 תווים בשורה.<br>
זכרו שמותר לעשות את אותו דבר גם עם תנאים:</p>
<pre><code class="lang-python">return select(Users.id, User.name).from(Users).where(Users.role == UserRoles.Administrator)
</code></pre>
<p>יכול להיכתב כ:</p>
<pre><code class="lang-python">is_admin = Users.role == UserRoles.Administrator
return select(Users.id, User.name).from(Users).where(is_admin)
</code></pre>
<h3>
<a name="h-2-unpacking-7" class="anchor" href="https://forums.pythonic.guru#h-2-unpacking-7"></a>דרך 2: Unpacking.</h3>
<p>הרבה פעמים Unpacking יכול גם לקצר לנו את הקוד, וגם להפוך אותו לקריא יותר.<br>
חשוב לא להשתמש ב־Unpacking כאשר הוא מסבך את הקוד, אבל לפעמים זה נראה מדהים:</p>
<p>במקום:</p>
<pre><code class="lang-auto">is_admin = Users.role == UserRoles.Administrator
return select(User.id, User.name, User.address, User.email).from(Users).where(is_admin)
</code></pre>
<p>נעדיף לכתוב:</p>
<pre><code class="lang-auto">user_shipping_details = (User.id, User.name, User.address, User.email)
is_admin = Users.role == UserRoles.Administrator
return select(*user_shipping_details).from(Users).where(is_admin)
</code></pre>
<p>גם אנחנו מבינים טוב יותר למה דווקא השדות האלו נבחרו (אלו השדות שחשובים לצורך משלוח של משהו למשתמש), וגם קיצרנו את השורה והפכנו אותה לקריאה יותר.</p>
<p>אפשר להשתמש ב־Unpacking גם כדי לחסוך קריאה לא נעימה לפונקציה מרובת פרמטרים, אם יש לנו את הנתונים במילון.<br>
תוכלו לראות דוגמה פשוטה לזה ב־<a href="https://github.com/PythonFreeCourse/lms/blob/master/lms/lmsweb/views.py#L103">lms</a> או דוגמה מורכבת יותר <a href="https://github.com/yammesicka/advent/blob/master/2020/2/pretty.py">בפתרון שלי ל־Advent of Code יום 2</a>.</p>
<h3>
<a name="h-3-8" class="anchor" href="https://forums.pythonic.guru#h-3-8"></a>דרך 3: פיצול שורה בכוח.</h3>
<p>לפעמים אנחנו לא מעוניינים או לא יכולים לבצע השמות – בין אם מחשש לפגיעה בקריאות הקוד, או במקרים אחרים בהם הפיצול להשמה לא מספיק.<br>
דרך טובה להתגבר על הבעיה הזו היא לשבור שורה אחת להרבה שורות.</p>
<p>אחת הצורות המוכרות והפחות מומלצות היא לעשות את זה באמצעות התו <code>\</code>. PEP8 <a href="https://www.python.org/dev/peps/pep-0008/#:~:text=The%20preferred%20way%20of%20wrapping%20long%20lines">פחות מתחבר</a> לשיטה הזו.</p>
<p>הצורה הפופולרית והמומלצת היא לפצל את השורה באמצעות סוגריים.<br>
לדוגמה:</p>
<pre><code class="lang-python">return get_all_directory_names(MAIN_DIRECTORY).get_files().to_lowercase().read()
</code></pre>
<p>יהפוך ל־</p>
<pre><code class="lang-python">return (
    get_all_directory_names(MAIN_DIRECTORY)
   .get_files()
   .to_lowercase()
   .read()
)
</code></pre>
<p>במקרה הזה, גם השמה למשתנים הייתה עובדת. אבל בואו ניקח דוגמה לפונקציה פחות נעימה:</p>
<pre><code class="lang-python">def get_files_in_directory(dir_name: str, is_recursive: bool) -&gt; Iterable[str]:
</code></pre>
<p>במקרה הזה, אפשר לפצל בצורה הבאה:</p>
<pre><code class="lang-python">def get_files_in_directory(
    dir_name: str, is_recursive: bool,
) -&gt; Iterable[str]:
</code></pre>
<p>אפשר להשתמש באותו טריק גם <a href="https://github.com/PythonFreeCourse/lms/blob/master/lms/lmsweb/views.py#L15">עם import־ים</a> שצריכים פיצול, או <a href="https://github.com/PythonFreeCourse/lms/blob/master/lms/models/solutions.py#L116">במבני נתונים</a> (מילון, רשימה, tuple) עם הרבה נתונים שצריכים פיצול.</p>
<h3>
<a name="h-9" class="anchor" href="https://forums.pythonic.guru#h-9"></a>טיפ: איך מפצלים עם סוגריים ככה שהקוד לא יראה צ’יקמוק</h3>
<p>דבר ראשון – אם זו רשימה של דברים, תמיד ודאו ש<a href="https://forums.pythonic.guru/t/topic/5612/4">גם השורה האחרונה מסתיימת בפסיק</a>.<br>
פירטתי למה בקישור, אבל בגדול זה עוזר לאנשים שבאים לאחריכם להשתלב בקוד בלי להוסיף באגים ומשאיר את השורה על שמכם ב־git כשמישהו יוסיף קוד.</p>
<p>אני מקפיד שלא להשאיר את השורה הסוגרת “תלויה באוויר”, בעיניי זה נראה מכוער. כמובן שזה עניין של טעם.<br>
כלומר, לעולם לא כך:</p>
<pre><code class="lang-python">def get_files_in_directory(
    dir_name: str, is_recursive: bool) -&gt; Iterable[str]:
</code></pre>
<p>וכן כך:</p>
<pre><code class="lang-python">def get_files_in_directory(
    dir_name: str, is_recursive: bool,
) -&gt; Iterable[str]:
</code></pre>
<p>או כך:</p>
<pre><code class="lang-python">def get_files_in_directory(
    dir_name: str,
    is_recursive: bool,
) -&gt; Iterable[str]:
</code></pre>
<p>כמובן שעדיף להימנע מרשימות ממש ארוכות שמפוצלות ככה ויוצרות מפלצת של 10 שורות.<br>
אם יש 5 שורות שכתובות ככה אתם אמורים לחשוד שמשהו היה אמור להיות מפוצל בדרך אלגנטית יותר.</p>
<h2>
<a name="h-10" class="anchor" href="https://forums.pythonic.guru#h-10"></a>האם אין משהו שפותר את זה אוטומטית?</h2>
<p>תלוי עד כמה אתם נוראיים, בלתי נסבלים ופדנטיים בהקשרי אורך השורות שלכם.<br>
אם אתם נוראיים כמוני אז למרבה הצער כיום אין פתרון שעושה את זה בצורה שנראית טוב.</p>
<p>לשימושם של אנשים שכן בריאים בנפשם, יש מודול בשם <a href="https://github.com/psf/black">black</a> שעושה את זה בצורה סבירה למדי.</p>
<p>חשוב לי להדגיש שוב: <strong>אל</strong> תעירו לאנשים אחרים על דברים סגנוניים אם זה לא ב־guideline של הפרויקט.<br>
שתי סיבות:</p>
<ol>
<li>הזמן שלכם יקר, ומה שלא דאגו לו שייעשה בצורה מספיק אוטומטית – כנראה לא מספיק חשוב.</li>
<li>זו דרך מצוינת לזה שכולם יישנאו אתכם ולפתוח מלחמות דת. זה מביא חורבן, סבל, כאוס ומאגיה שחורה.</li>
</ol>
<h2>
<a name="h-11" class="anchor" href="https://forums.pythonic.guru#h-11"></a>האם אני אתחיל לאכוף את זה בקומיטים שנשלחים?</h2>
<p>לא.</p>
          <p><a href="https://forums.pythonic.guru/t/topic/9042/1">קריאת הנושא במלואו</a></p>
        ]]></description>
        <link>https://forums.pythonic.guru/t/topic/9042/1</link>
        <pubDate>Fri, 05 Feb 2021 03:17:29 +0000</pubDate>
        <guid isPermaLink="false">forums.pythonic.guru-post-9042-1</guid>
        <source url="https://forums.pythonic.guru/t/topic/9042.rss">על סגנון, 79 תווים בשורה, טכניקות לפיצול שורה וכיו&quot;ב</source>
      </item>
  </channel>
</rss>
